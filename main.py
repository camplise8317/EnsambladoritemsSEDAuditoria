# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
from docxtpl import DocxTemplate
import google.generativeai as genai
import os
import re
import time
import zipfile
from io import BytesIO

# --- CONFIGURACI√ìN DE LA P√ÅGINA DE STREAMLIT ---
st.set_page_config(
    page_title="Ensamblador de Fichas T√©cnicas con IA",
    page_icon="ü§ñ",
    layout="wide"
)

# --- FUNCIONES DE L√ìGICA ---

def limpiar_html(texto_html):
    """Limpia etiquetas HTML de un texto."""
    if not isinstance(texto_html, str):
        return texto_html
    cleanr = re.compile('<.*?>')
    texto_limpio = re.sub(cleanr, '', texto_html)
    return texto_limpio

def setup_model(api_key):
    """Configura y retorna el cliente para el modelo Gemini."""
    try:
        genai.configure(api_key=api_key)
        generation_config = {
            "temperature": 0.6, "top_p": 1, "top_k": 1, "max_output_tokens": 8192
        }
        safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_ONLY_HIGH"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_ONLY_HIGH"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_ONLY_HIGH"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_ONLY_HIGH"},
        ]
        model = genai.GenerativeModel(
            model_name="gemini-1.5-pro-latest",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        return model
    except Exception as e:
        st.error(f"Error al configurar la API de Google: {e}")
        return None

# --- EJEMPLOS DE ALTA CALIDAD (FEW-SHOT PROMPTING) ---

EJEMPLOS_ANALISIS_PREMIUM = """
A continuaci√≥n, te muestro ejemplos de an√°lisis de la m√°s alta calidad. Tu respuesta debe seguir este mismo estilo, tono y nivel de detalle.

### EJEMPLO 1: LECTURA LITERAL (TEXTO NARRATIVO) ###
**INSUMOS:**
- Competencia: Comprensi√≥n de textos
- Componente: Lectura literal
- Evidencia: Reconoce informaci√≥n espec√≠fica en el texto.
- Enunciado: Los personajes del cuento son:
- Opciones: A: "Un hombre, un hombrecito y alguien que sostiene unas pinzas.", B: "Un narrador, un hombre y un hombrecito.", C: Un hombrecito y alguien que sostiene unas pinzas., D: Un hombre y el narrador.

**RESULTADO ESPERADO:**
Ruta Cognitiva Correcta:
Para responder el √≠tem, el estudiante debe leer el cuento prestando atenci√≥n a las entidades que realizan acciones o a quienes les suceden eventos en el texto. En el tercer p√°rrafo, se menciona a "un hombre" que arm√≥ el barquito y a un "hombrecito diminuto" dentro de la botella. En el √∫ltimo p√°rrafo, se describe que un "ojo enorme lo atisbaba desde fuera" al primer hombre y que "unas enormes pinzas que avanzaban hacia √©l". Este "ojo enorme" y las "enormes pinzas" implican la existencia de un tercer personaje, un ser que se encuentra mirando al primer personaje. El estudiante debe identificar a todos estos personajes que interact√∫an o son afectados por la trama.

An√°lisis de Opciones No V√°lidas:
- **Opci√≥n B:** No es correcta porque, en este cuento, el "narrador" es la voz que cuenta la historia, no un personaje que participe en los eventos del cuento. El relato est√° escrito en tercera persona y el narrador se mantiene fuera de la acci√≥n.
- **Opci√≥n C:** No es correcta porque omite al primer personaje introducido y central en la trama: "un hombre" que construye el barquito y observa al "hombrecito". Sin este personaje, la secuencia de eventos no se establece.
- **Opci√≥n D:** No es correcta porque, al igual que la opci√≥n B, incluye al "narrador" como personaje, lo cual es incorrecto. Adem√°s, omite al "hombrecito" y al ser con "unas pinzas", reduciendo el n√∫mero de personajes activos en la historia.

### EJEMPLO 2: LECTURA INFERENCIAL (TEXTO NARRATIVO-INFORMATIVO) ###
**INSUMOS:**
- Competencia: Comprensi√≥n de textos
- Componente: Lectura inferencial
- Evidencia: Integra y compara diferentes partes del texto y analiza la estructura para hacer inferencias.
- Enunciado: Lee el siguiente fragmento del texto: ‚ÄúLos manglares est√°n muriendo, por lo que el desequilibrio es cada vez mayor. La carretera lo cambi√≥ todo. Para construirla arrasaron veinte mil hect√°reas de manglar...‚Äù. ¬øQu√© funci√≥n cumple la parte subrayada dentro del fragmento?
- Opciones: A: Se√±alar la causa de un problema medioambiental., B: Establecer una comparaci√≥n entre dos acciones de un proceso., C: Mostrar la consecuencia del da√±o medioambiental., D: Explicar el motivo por el que se decidi√≥ realizar una acci√≥n.

**RESULTADO ESPERADO:**
Ruta Cognitiva Correcta:
El estudiante debe comprender el contenido del fragmento y la estructura global del texto, para luego identificar cu√°l es la funci√≥n que cumple dentro de esta. En este caso espec√≠fico, el estudiante debe comprender que el fragmento se√±ala la principal causa que ha llevado al desequilibrio del ecosistema de los manglares en la zona, y que este fragmento del texto justamente cumple con la funci√≥n de se√±alar esa causa.

An√°lisis de Opciones No V√°lidas:
- **Opci√≥n B:** Es incorrecta porque la pregunta busca la causa del problema, no la comparaci√≥n de acciones.
- **Opci√≥n C:** Es incorrecta porque el estudiante confunde la causa con la consecuencia del problema medioambiental. Identifica un efecto del problema, pero no su origen.
- **Opci√≥n D:** Es incorrecta porque se centra en la motivaci√≥n detr√°s de una acci√≥n, en lugar de la causa del problema en s√≠ mismo. La pregunta busca el origen del problema medioambiental.

### EJEMPLO 3: LECTURA CR√çTICA (TEXTO NARRATIVO-INFORMATIVO) ###
**INSUMOS:**
- Competencia: Comprensi√≥n de textos
- Componente: Lectura cr√≠tica
- Evidencia: Eval√∫a la credibilidad, confiabilidad y objetividad del texto, emitiendo juicios cr√≠ticos sobre la informaci√≥n.
- Enunciado: ¬øPor qu√© el autor cita el testimonio de Jes√∫s Su√°rez en el texto?
- Opciones: A: Porque es el vocero que la comunidad palaf√≠tica ha designado., B: Porque es causante de la situaci√≥n que ocurre en la poblaci√≥n., C: Porque al ser experto en ecosistemas acu√°ticos su opini√≥n es confiable., D: Porque al ser investigador puede verificar lo dicho por otro testigo de los hechos.

**RESULTADO ESPERADO:**
Ruta Cognitiva Correcta:
El estudiante analiza las opciones presentadas considerando la relaci√≥n entre la justificaci√≥n dada y la confiabilidad de la fuente. Eval√∫a la opci√≥n C y reconoce que la experticia en ecosistemas acu√°ticos otorga mayor credibilidad a la opini√≥n de un individuo sobre una situaci√≥n relacionada con este tema. Justifica la selecci√≥n de la opci√≥n C al contrastarla con las dem√°s opciones, considerando la relevancia de la experticia para la situaci√≥n planteada.

An√°lisis de Opciones No V√°lidas:
- **Opci√≥n A:** Es incorrecta porque ser vocero no implica necesariamente tener el conocimiento experto para opinar sobre situaciones espec√≠ficas.
- **Opci√≥n B:** Es incorrecta porque ser causante de un problema no implica tener el conocimiento o la imparcialidad para analizarlo y ofrecer una opini√≥n confiable.
- **Opci√≥n D:** Es incorrecta porque la verificaci√≥n de un testimonio en este contexto requiere una experticia espec√≠fica en el tema, que en este caso es ecosistemas acu√°ticos.
"""

EJEMPLOS_RECOMENDACIONES_PREMIUM = """
A continuaci√≥n, te muestro ejemplos de recomendaciones pedag√≥gicas de la m√°s alta calidad. Tu respuesta debe seguir este mismo estilo, estructura y enfoque creativo.

### EJEMPLO 1 DE RECOMENDACIONES PERFECTAS (TEXTO DISCONTINUO) ###
**INSUMOS:**
- Qu√© Eval√∫a el √çtem: El √≠tem eval√∫a la habilidad del estudiante para relacionar diferentes elementos del contenido e identificar nueva informaci√≥n en textos no literarios.
- Evidencia: Relaciona diferentes partes del texto para hacer inferencias sobre significados o sobre el prop√≥sito general.

**RESULTADO ESPERADO:**
RECOMENDACI√ìN PARA FORTALECER EL APRENDIZAJE EVALUADO EN EL √çTEM
Para reforzar la habilidad de vincular diferentes elementos del contenido y descubrir nuevas ideas, se sugiere la realizaci√≥n de actividades que impliquen el an√°lisis de textos no literarios de car√°cter discontinuo como infograf√≠as. Los estudiantes podr√≠an empezar por leer estas fuentes y marcar los datos que consideren relevantes. Posteriormente, en un esfuerzo colectivo, podr√≠an construir un mapa conceptual que refleje la relaci√≥n entre los diferentes datos resaltados. Finalmente, podr√≠an trabajar en la identificaci√≥n de las ideas principales y secundarias que emergen de este mapa, lo que les permitir√° tener una comprensi√≥n m√°s profunda del texto.

RECOMENDACI√ìN PARA AVANZAR EN EL APRENDIZAJE EVALUADO EN EL √çTEM
Para consolidar la capacidad de identificar las funciones de los diferentes elementos que componen un texto no literario de car√°cter discontinuo, se sugiere fomentar la pr√°ctica de reorganizar textos desordenados. Los estudiantes pueden recibir fragmentos de una infograf√≠a que deben arreglar en el orden correcto, identificando la introducci√≥n, el desarrollo y la conclusi√≥n. Durante esta actividad, se pueden formular preguntas como: ¬øCu√°l fragmento introduce el tema? ¬øQu√© informaci√≥n proporciona esta imagen o gr√°fico? ¬øC√≥mo se relaciona con el texto?

### EJEMPLO 2 DE RECOMENDACIONES PERFECTAS (TEXTO INFORMATIVO) ###
**INSUMOS:**
- Qu√© Eval√∫a el √çtem: Este √≠tem eval√∫a la capacidad del estudiante para hacer una inferencia integrando informaci√≥n impl√≠cita presente en una parte del texto.
- Evidencia: Integra y compara diferentes partes del texto y analiza la estructura para hacer inferencias.

**RESULTADO ESPERADO:**
RECOMENDACI√ìN PARA FORTALECER EL APRENDIZAJE EVALUADO EN EL √çTEM
Para fortalecer la habilidad de hacer inferencias a partir de un segmento de un texto informativo, se sugiere implementar una din√°mica de "lectura de pistas". Esta estrategia se enfoca en que los estudiantes identifiquen informaci√≥n impl√≠cita en fragmentos textuales cortos para inferir contextos o emociones que no se mencionan directamente. El docente puede presentar al grupo tres o cuatro fragmentos muy breves y evocadores (de noticias o cr√≥nicas) que insin√∫en una situaci√≥n sin describirla por completo. Por ejemplo: "El tel√©fono son√≥ por d√©cima vez. Al otro lado de la l√≠nea, solo se o√≠a una respiraci√≥n agitada. Afuera, la sirena de una ambulancia se acercaba". Los estudiantes, en parejas, leen el fragmento y discuten qu√© pueden deducir de la escena. Las preguntas orientadoras pueden ser: ¬øQu√© pistas te da el texto sobre el estado de √°nimo de la persona?, ¬øQu√© crees que pas√≥ justo antes de la escena descrita?

RECOMENDACI√ìN PARA AVANZAR EN EL APRENDIZAJE EVALUADO EN EL √çTEM
Para avanzar en la habilidad de hacer inferencias complejas a partir de la comparaci√≥n de diferentes partes de un texto, se sugiere proponer un an√°lisis de perspectivas m√∫ltiples dentro de una misma cr√≥nica o texto informativo. El objetivo es que los estudiantes superen la inferencia local y aprendan a contrastar voces, datos o argumentos presentados en un mismo relato. El docente puede seleccionar una cr√≥nica period√≠stica sobre un tema urbano actual que incluya las voces de distintos actores sociales (un vendedor, un residente, un funcionario). Los estudiantes deben leer el texto e identificar y comparar las diferentes posturas frente al mismo hecho. Las preguntas orientadoras pueden ser: ¬øQu√© similitudes y diferencias encuentras entre las perspectivas?, ¬øQu√© visi√≥n del problema se formar√≠a un lector si el texto solo hubiera incluido una de estas voces?
"""

# --- FUNCIONES DE PROMPTS SECUENCIALES ---

def construir_prompt_paso1_analisis_central(fila):
    """Paso 1: Genera la Ruta Cognitiva y el An√°lisis de Distractores, guiado por ejemplos."""
    fila = fila.fillna('')
    descripcion_item = (
        f"Enunciado: {fila.get('Enunciado', '')}\n"
        f"A. {fila.get('OpcionA', '')}\n"
        f"B. {fila.get('OpcionB', '')}\n"
        f"C. {fila.get('OpcionC', '')}\n"
        f"D. {fila.get('OpcionD', '')}\n"
        f"Respuesta correcta: {fila.get('AlternativaClave', '')}"
    )
    return f"""
üéØ ROL DEL SISTEMA
Eres un experto psic√≥metra y pedagogo. Tu misi√≥n es deconstruir un √≠tem de evaluaci√≥n siguiendo el estilo y la calidad de los ejemplos proporcionados.

{EJEMPLOS_ANALISIS_PREMIUM}

üß† INSUMOS DE ENTRADA (Para el nuevo √≠tem que debes analizar):
- Texto/Fragmento: {fila.get('ItemContexto', 'No aplica')}
- Descripci√≥n del √çtem: {fila.get('ItemEnunciado', 'No aplica')}
- Componente: {fila.get('ComponenteNombre', 'No aplica')}
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}
- Tipolog√≠a Textual (Solo para Lectura Cr√≠tica): {fila.get('Tipologia Textual', 'No aplica')}
- Grado Escolar: {fila.get('ItemGradoId', '')}
- An√°lisis de Errores Comunes: {fila.get('Analisis_Errores', 'No aplica')}
- Respuesta correcta: {fila.get('AlternativaClave', 'No aplica')}
- Opci√≥n A: {fila.get('OpcionA', 'No aplica')}
- Opci√≥n B: {fila.get('OpcionB', 'No aplica')}
- Opci√≥n C: {fila.get('OpcionC', 'No aplica')}
- Opci√≥n D: {fila.get('OpcionD', 'No aplica')}


üìù INSTRUCCIONES
Bas√°ndote en los ejemplos de alta calidad y los nuevos insumos, realiza el siguiente proceso en dos fases:

FASE 1: RUTA COGNITIVA
Describe, en un p√°rrafo continuo y de forma impersonal, el procedimiento mental que un estudiante debe ejecutar para llegar a la respuesta correcta.
1.  **Genera la Ruta Cognitiva:** Describe el paso a paso mental y l√≥gico que un estudiante debe seguir para llegar a la respuesta correcta. Usa verbos que representen procesos cognitivos.
2.  **Auto-Verificaci√≥n:** Revisa que la ruta se alinee con la Competencia ('{fila.get('CompetenciaNombre', '')}') y la Evidencia ('{fila.get('EvidenciaNombre', '')}').
3.  **Justificaci√≥n Final:** El √∫ltimo paso debe justificar la elecci√≥n de la respuesta correcta.

FASE 2: AN√ÅLISIS DE OPCIONES NO V√ÅLIDAS
- Para cada opci√≥n incorrecta, identifica la naturaleza del error y explica el razonamiento fallido.
- Luego, explica el posible razonamiento que lleva al estudiante a cometer ese error.
- Finalmente, clarifica por qu√© esa opci√≥n es incorrecta en el contexto de la tarea evaluativa.

‚úçÔ∏è FORMATO DE SALIDA
**REGLA CR√çTICA:** Responde √∫nicamente con los dos t√≠tulos siguientes, en este orden y sin a√±adir texto adicional.

Ruta Cognitiva Correcta:
[P√°rrafo continuo y detallado.] Debe describir como es la secuencia de procesos cognitivos. Ejemplo: Para resolver correctamente este √≠tem, el estudiante primero debe [verbo cognitivo 1]... Luego, necesita [verbo cognitivo 2]... Este proceso le permite [verbo cognitivo 3]..., lo que finalmente lo lleva a concluir que la opci√≥n [letra de la respuesta correcta] es la correcta porque [justificaci√≥n final].

An√°lisis de Opciones No V√°lidas:
- **Opci√≥n [Letra del distractor]:** El estudiante podr√≠a escoger esta opci√≥n si comete un error de [naturaleza de la confusi√≥n u error], lo que lo lleva a pensar que [razonamiento err√≥neo]. Sin embargo, esto es incorrecto porque [raz√≥n clara y concisa].
"""

def construir_prompt_paso2_sintesis_que_evalua(analisis_central_generado, fila):
    """Paso 2: Sintetiza el "Qu√© Eval√∫a" a partir del an√°lisis central."""
    fila = fila.fillna('')
    try:
        header_distractores = "An√°lisis de Opciones No V√°lidas:"
        idx_distractores = analisis_central_generado.find(header_distractores)
        ruta_cognitiva_texto = analisis_central_generado[:idx_distractores].strip() if idx_distractores != -1 else analisis_central_generado
    except:
        ruta_cognitiva_texto = analisis_central_generado

    return f"""
üéØ ROL DEL SISTEMA
Eres un experto en evaluaci√≥n que sintetiza an√°lisis complejos en una sola frase concisa.

üß† INSUMOS DE ENTRADA
A continuaci√≥n, te proporciono un an√°lisis detallado de la ruta cognitiva necesaria para resolver un √≠tem.

AN√ÅLISIS DE LA RUTA COGNITIVA:
---
{ruta_cognitiva_texto}
---

TAXONOM√çA DE REFERENCIA:
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}

üìù INSTRUCCIONES
Bas√°ndote **exclusivamente** en el AN√ÅLISIS DE LA RUTA COGNITIVA, redacta una √∫nica frase (m√°ximo 2 renglones) que resuma la habilidad principal que se est√° evaluando.
- **Regla 1:** La frase debe comenzar obligatoriamente con "Este √≠tem eval√∫a la capacidad del estudiante para...".
- **Regla 2:** La frase debe describir los **procesos cognitivos**, no debe contener especificamene ninguno de los elementos del texto o del √≠tem, busca en cambio palabras/expresiones gen√©ricas en reemplazo de elementos del item/texto cuando es necesario.
- **Regla 3:** Utiliza la TAXONOM√çA DE REFERENCIA para asegurar que el lenguaje sea preciso y alineado.

‚úçÔ∏è FORMATO DE SALIDA
Responde √∫nicamente con la frase solicitada, sin el t√≠tulo "Qu√© Eval√∫a".
"""

def construir_prompt_paso3_recomendaciones(que_evalua_sintetizado, analisis_central_generado, fila):
    """Paso 3: Genera las recomendaciones, guiado por ejemplos."""
    fila = fila.fillna('')
    return f"""
üéØ ROL DEL SISTEMA
Eres un dise√±ador instruccional experto, especializado en crear actividades de lectura novedosas, siguiendo el est√°ndar de los ejemplos provistos.

{EJEMPLOS_RECOMENDACIONES_PREMIUM}

üß† INSUMOS DE ENTRADA (Para el nuevo √≠tem):
- Qu√© Eval√∫a el √çtem: {que_evalua_sintetizado}
- An√°lisis Detallado del √çtem: {analisis_central_generado}
- Texto/Fragmento: {fila.get('ItemContexto', 'No aplica')}
- Descripci√≥n del √çtem: {fila.get('ItemEnunciado', 'No aplica')}
- Componente: {fila.get('ComponenteNombre', 'No aplica')}
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}
- Tipolog√≠a Textual (Solo para Lectura Cr√≠tica): {fila.get('Tipologia Textual', 'No aplica')}
- Grado Escolar: {fila.get('ItemGradoId', '')}
- An√°lisis de Errores Comunes: {fila.get('Analisis_Errores', 'No aplica')}
- Respuesta correcta: {fila.get('AlternativaClave', 'No aplica')}

üìù INSTRUCCIONES PARA GENERAR LAS RECOMENDACIONES
Bas√°ndote en los ejemplos de alta calidad y los nuevos insumos, genera dos recomendaciones (Fortalecer y Avanzar) que cumplan con estas reglas inviolables:
1.  **FIDELIDAD A LA TAXONOM√çA:** Las actividades deben alinearse con el 'Qu√© Eval√∫a el √çtem'.
2.  **CERO PRODUCCI√ìN ESCRITA:** Deben ser actividades exclusivas de lectura, selecci√≥n u organizaci√≥n oral.
3.  **GENERALIDAD Y CREATIVIDAD:** Las actividades deben ser novedosas, l√∫dicas, no t√≠picas, y aplicables a textos generales.
4.  **REDACCI√ìN IMPERSONAL.**

### 1. Recomendaci√≥n para FORTALECER üí™
- **Objetivo:** Descomponer el proceso cognitivo descrito en el 'Qu√© Eval√∫a' en pasos manejables.
- **Actividad:** Dise√±a una actividad que sirva de andamio para la habilidad central. No le pongas ningun nombre a la actividad.
- **Preguntas:** Formula preguntas que gu√≠en el razonamiento paso a paso.
- **Contexto Pedag√≥gico:** La actividad debe ser un microcosmos de dicha evidencia, pero simplificada. Debes **descomponer el proceso cognitivo en pasos manejables**.
- **Actividad Propuesta:** Dise√±a una actividad de lectura que sea **novedosa, creativa y l√∫dica**. **Evita expl√≠citamente ejercicios t√≠picos** como cuestionarios, llenar espacios en blanco o buscar ideas principales de forma tradicional. La actividad debe ser √∫til para los profesores.
- **Preguntas Orientadoras:** Formula preguntas que funcionen como un **"paso a paso" del razonamiento**, guiando al estudiante a trav√©s del proceso de forma sutil.


### 2. Recomendaci√≥n para AVANZAR üöÄ
- **Objetivo:** Crear una progresi√≥n cognitiva clara desde Fortalecer, dentro de la misma Competencia.
- **Objetivo Central:** Asegurar una **progresi√≥n cognitiva clara y directa en la que el estudiante avanza** cuando se compara con la actividad de Fortalecer.
- **Contexto Pedag√≥gico:** La actividad para Avanzar debe ser la **evoluci√≥n natural y m√°s compleja de la habilidad trabajada en Fortalecer**. La conexi√≥n entre ambas debe ser expl√≠cita y l√≥gica.  No le pongas ningun nombre a la actividad.
- **Actividad Propuesta:** Dise√±a un desaf√≠o intelectual de lectura o an√°lisis comparativo que sea **estimulante y poco convencional**. La actividad debe promover el pensamiento cr√≠tico y la transferencia de habilidades de una manera que no sea habitual en el aula.
- **Preguntas Orientadoras:** Formula preguntas abiertas que exijan **evaluaci√≥n, s√≠ntesis, aplicaci√≥n o metacognici√≥n**, demostrando un salto cualitativo respecto a las preguntas de Fortalecer.

‚úçÔ∏è FORMATO DE SALIDA DE LAS RECOMENDACIONES
**IMPORTANTE: Responde de forma directa, usando obligatoriamente la siguiente estructura. No a√±adas texto adicional.**
- **Redacci√≥n Impersonal:** Utiliza siempre una redacci√≥n profesional e impersonal (ej. "se sugiere (sin mencionar el docente)", "la tarea consiste en", "se entregan tarjetas").
- **Sin Conclusiones:** Termina directamente con la lista de preguntas.

RECOMENDACI√ìN PARA FORTALECER EL APRENDIZAJE EVALUADO EN EL √çTEM
Para fortalecer la habilidad de [verbo clave extra√≠do de la Evidencia de Aprendizaje], se sugiere [descripci√≥n de la estrategia de andamiaje para ese proceso exacto].
Una actividad que se puede hacer es: [Descripci√≥n detallada de la actividad novedosa y creativa, que no implica escritura].
Las preguntas orientadoras para esta actividad, entre otras, pueden ser:
- [Pregunta 1: Que gu√≠e el primer paso del proceso cognitivo]
- [Pregunta 2: Que ayude a analizar un componente clave del proceso]
- [Pregunta 3: Que conduzca a la conclusi√≥n del proceso base]

RECOMENDACI√ìN PARA AVANZAR EN EL APRENDIZAJE EVALUADO EN EL √çTEM
Para avanzar desde [proceso cognitivo de Fortalecer] hacia la habilidad de [verbo clave del proceso cognitivo superior], se sugiere [descripci√≥n de la estrategia de complejizaci√≥n].
Una actividad que se puede hacer es: [Descripci√≥n detallada de la actividad estimulante y poco convencional, que no implique escritura].
Las preguntas orientadoras para esta actividad, entre otras, pueden ser:
- [Pregunta 1: De an√°lisis o evaluaci√≥n que requiera un razonamiento m√°s profundo]
- [Pregunta 2: De aplicaci√≥n, comparaci√≥n o transferencia a un nuevo contexto]
- [Pregunta 3: De metacognici√≥n o pensamiento cr√≠tico sobre el proceso completo]
"""

# --- INTERFAZ PRINCIPAL DE STREAMLIT ---

st.title("ü§ñ Ensamblador de Fichas T√©cnicas con IA")
st.markdown("Una aplicaci√≥n para enriquecer datos pedag√≥gicos y generar fichas personalizadas.")

if 'df_enriquecido' not in st.session_state:
    st.session_state.df_enriquecido = None
if 'zip_buffer' not in st.session_state:
    st.session_state.zip_buffer = None

# --- PASO 0: Clave API ---
st.sidebar.header("üîë Configuraci√≥n Obligatoria")
api_key = st.sidebar.text_input("Ingresa tu Clave API de Google AI (Gemini)", type="password")

# --- PASO 1: Carga de Archivos ---
st.header("Paso 1: Carga tus Archivos")
col1, col2 = st.columns(2)
with col1:
    archivo_excel = st.file_uploader("Sube tu Excel con los datos base", type=["xlsx"])
with col2:
    archivo_plantilla = st.file_uploader("Sube tu Plantilla de Word", type=["docx"])

# --- PASO 2: Enriquecimiento con IA ---
st.header("Paso 2: Enriquece tus Datos con IA")
if st.button("ü§ñ Iniciar An√°lisis y Generaci√≥n", disabled=(not api_key or not archivo_excel)):
    if not api_key:
        st.error("Por favor, ingresa tu clave API en la barra lateral izquierda.")
    elif not archivo_excel:
        st.warning("Por favor, sube un archivo Excel para continuar.")
    else:
        model = setup_model(api_key)
        if model:
            with st.spinner("Procesando archivo Excel y preparando datos..."):
                df = pd.read_excel(archivo_excel)
                for col in df.columns:
                    if df[col].dtype == 'object':
                        df[col] = df[col].apply(limpiar_html)

                columnas_nuevas = ["Que_Evalua", "Justificacion_Correcta", "Analisis_Distractores", "Recomendacion_Fortalecer", "Recomendacion_Avanzar"]
                for col in columnas_nuevas:
                    if col not in df.columns:
                        df[col] = ""
                st.success("Datos limpios y listos.")

            progress_bar_main = st.progress(0, text="Iniciando Proceso...")
            total_filas = len(df)

            for i, fila in df.iterrows():
                item_id = fila.get('ItemId', i + 1)
                st.markdown(f"--- \n ### Procesando √çtem: **{item_id}**")
                progress_bar_main.progress(i / total_filas, text=f"Procesando √≠tem {i+1}/{total_filas}")

                with st.container(border=True):
                    try:
                        # --- LLAMADA 1: AN√ÅLISIS CENTRAL (RUTA COGNITIVA Y DISTRACTORES) ---
                        st.write(f"**Paso 1/3:** Realizando an√°lisis central del √≠tem...")
                        prompt_paso1 = construir_prompt_paso1_analisis_central(fila)
                        response_paso1 = model.generate_content(prompt_paso1)
                        analisis_central = response_paso1.text.strip()
                        time.sleep(1)

                        header_correcta = "Ruta Cognitiva Correcta:"
                        header_distractores = "An√°lisis de Opciones No V√°lidas:"
                        idx_distractores = analisis_central.find(header_distractores)
                        
                        if idx_distractores == -1:
                            raise ValueError("No se encontr√≥ el separador 'An√°lisis de Opciones No V√°lidas' en la respuesta del paso 1.")

                        ruta_cognitiva = analisis_central[len(header_correcta):idx_distractores].strip()
                        analisis_distractores = analisis_central[idx_distractores:].strip()

                        # --- LLAMADA 2: S√çNTESIS DEL "QU√â EVAL√öA" ---
                        st.write(f"**Paso 2/3:** Sintetizando 'Qu√© Eval√∫a'...")
                        prompt_paso2 = construir_prompt_paso2_sintesis_que_evalua(analisis_central, fila)
                        response_paso2 = model.generate_content(prompt_paso2)
                        que_evalua = response_paso2.text.strip()
                        time.sleep(1)
                        
                        # --- LLAMADA 3: GENERACI√ìN DE RECOMENDACIONES ---
                        st.write(f"**Paso 3/3:** Generando recomendaciones pedag√≥gicas...")
                        prompt_paso3 = construir_prompt_paso3_recomendaciones(que_evalua, analisis_central, fila)
                        response_paso3 = model.generate_content(prompt_paso3)
                        recomendaciones = response_paso3.text.strip()
                        
                        titulo_avanzar = "RECOMENDACI√ìN PARA AVANZAR"
                        idx_avanzar = recomendaciones.upper().find(titulo_avanzar)
                        
                        if idx_avanzar == -1:
                           raise ValueError("No se encontr√≥ el separador 'RECOMENDACI√ìN PARA AVANZAR' en la respuesta del paso 3.")

                        fortalecer = recomendaciones[:idx_avanzar].strip()
                        avanzar = recomendaciones[idx_avanzar:].strip()

                        # --- GUARDAR TODO EN EL DATAFRAME ---
                        df.loc[i, "Que_Evalua"] = que_evalua
                        df.loc[i, "Justificacion_Correcta"] = ruta_cognitiva
                        df.loc[i, "Analisis_Distractores"] = analisis_distractores
                        df.loc[i, "Recomendacion_Fortalecer"] = fortalecer
                        df.loc[i, "Recomendacion_Avanzar"] = avanzar
                        st.success(f"√çtem {item_id} procesado con √©xito.")

                    except Exception as e:
                        st.error(f"Ocurri√≥ un error procesando el √≠tem {item_id}: {e}")
                        df.loc[i, "Que_Evalua"] = "ERROR EN PROCESAMIENTO"
                        df.loc[i, "Justificacion_Correcta"] = f"Error: {e}"
                        df.loc[i, "Analisis_Distractores"] = "ERROR EN PROCESAMIENTO"
                        df.loc[i, "Recomendacion_Fortalecer"] = "ERROR EN PROCESAMIENTO"
                        df.loc[i, "Recomendacion_Avanzar"] = "ERROR EN PROCESAMIENTO"
            
            progress_bar_main.progress(1.0, text="¬°Proceso completado!")
            st.session_state.df_enriquecido = df
            st.balloons()
        else:
            st.error("No se pudo inicializar el modelo de IA. Verifica tu clave API.")


# --- PASO 3: Vista Previa y Verificaci√≥n ---
if st.session_state.df_enriquecido is not None:
    st.header("Paso 3: Verifica los Datos Enriquecidos")
    st.dataframe(st.session_state.df_enriquecido.head())
    
    output_excel = BytesIO()
    with pd.ExcelWriter(output_excel, engine='openpyxl') as writer:
        st.session_state.df_enriquecido.to_excel(writer, index=False, sheet_name='Datos Enriquecidos')
    output_excel.seek(0)
    
    st.download_button(
        label="üì• Descargar Excel Enriquecido",
        data=output_excel,
        file_name="excel_enriquecido_con_ia.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# --- PASO 4: Ensamblaje de Fichas ---
if st.session_state.df_enriquecido is not None and archivo_plantilla is not None:
    st.header("Paso 4: Ensambla las Fichas T√©cnicas")
    
    columna_nombre_archivo = st.text_input(
        "Escribe el nombre de la columna para nombrar los archivos (ej. ItemId)",
        value="ItemId"
    )
    
    if st.button("üìÑ Ensamblar Fichas T√©cnicas", type="primary"):
        df_final = st.session_state.df_enriquecido
        if columna_nombre_archivo not in df_final.columns:
            st.error(f"La columna '{columna_nombre_archivo}' no existe en el Excel. Por favor, elige una de: {', '.join(df_final.columns)}")
        else:
            with st.spinner("Ensamblando todas las fichas en un archivo .zip..."):
                plantilla_bytes = BytesIO(archivo_plantilla.getvalue())
                zip_buffer = BytesIO()
                
                with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                    total_docs = len(df_final)
                    progress_bar_zip = st.progress(0, text="Iniciando ensamblaje...")
                    for i, fila in df_final.iterrows():
                        doc = DocxTemplate(plantilla_bytes)
                        contexto = fila.to_dict()
                        contexto_limpio = {k: (v if pd.notna(v) else "") for k, v in contexto.items()}
                        doc.render(contexto_limpio)
                        
                        doc_buffer = BytesIO()
                        doc.save(doc_buffer)
                        doc_buffer.seek(0)
                        
                        nombre_base = str(fila.get(columna_nombre_archivo, f"ficha_{i+1}")).replace('/', '_').replace('\\', '_')
                        nombre_archivo_salida = f"{nombre_base}.docx"
                        
                        zip_file.writestr(nombre_archivo_salida, doc_buffer.getvalue())
                        progress_bar_zip.progress((i + 1) / total_docs, text=f"A√±adiendo ficha {i+1}/{total_docs} al .zip")
                
                st.session_state.zip_buffer = zip_buffer
                st.success("¬°Ensamblaje completado!")

# --- PASO 5: Descarga Final ---
if st.session_state.zip_buffer:
    st.header("Paso 5: Descarga el Resultado Final")
    st.download_button(
        label="üì• Descargar TODAS las fichas (.zip)",
        data=st.session_state.zip_buffer.getvalue(),
        file_name="fichas_tecnicas_generadas.zip",
        mime="application/zip"
    )
